{"ast":null,"code":"var _jsxFileName = \"D:\\\\Asma Project\\\\Project_Mar2025\\\\Asma21March\\\\frontend\\\\src\\\\pages\\\\BreathingExercises.js\",\n  _s = $RefreshSig$();\n/*\nimport React, { useState, useEffect } from 'react';\nimport { Container, Card, Button } from 'react-bootstrap';\nimport '../styles/BreathingExercises.css';\n\nconst BreathingExercises = () => {\n  const [phase, setPhase] = useState('inhale');\n  const [timer, setTimer] = useState(4);\n\n  useEffect(() => {\n    const phases = ['inhale', 'hold', 'exhale', 'rest'];\n    let phaseIndex = phases.indexOf(phase);\n\n    const interval = setInterval(() => {\n      setTimer((prev) => {\n        if (prev === 1) {\n          // Move to the next phase\n          phaseIndex = (phaseIndex + 1) % phases.length;\n          setPhase(phases[phaseIndex]);\n          return phaseIndex === 2 ? 6 : 4; // Reset timer: 6 seconds for \"exhale\", 4 for others\n        }\n        return prev - 1; // Decrement timer\n      });\n    }, 1000);\n\n    return () => clearInterval(interval); // Cleanup interval on unmount\n  }, [phase]); // Add `phase` as a dependency\n\n  return (\n    <Container className=\"breathing-container\">\n      <Card className=\"breathing-card\">\n        <Card.Body>\n          <div className={`breathing-circle ${phase}`}>\n            <div className=\"phase-text\">{phase.toUpperCase()}</div>\n            <div className=\"timer\">{timer}s</div>\n          </div>\n          <div className=\"instructions\">\n            <p>Follow the breathing phases:</p>\n            <ul>\n              <li><strong>Inhale:</strong> Breathe in deeply for 4 seconds.</li>\n              <li><strong>Hold:</strong> Hold your breath for 4 seconds.</li>\n              <li><strong>Exhale:</strong> Breathe out slowly for 6 seconds.</li>\n              <li><strong>Rest:</strong> Relax for 4 seconds before the next cycle.</li>\n            </ul>\n          </div>\n          <div className=\"controls text-center\">\n            <Button\n              variant=\"primary\"\n              onClick={() => {\n                setPhase('inhale');\n                setTimer(4);\n              }}\n            >\n              Restart\n            </Button>\n          </div>\n        </Card.Body>\n      </Card>\n    </Container>\n  );\n};\n\nexport default BreathingExercises;\n*/\n\nimport React, { useState, useEffect } from 'react';\nimport { Container, Card, Button } from 'react-bootstrap';\nimport '../styles/BreathingExercises.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BreathingExercises = () => {\n  _s();\n  const [phase, setPhase] = useState('inhale');\n  const [timer, setTimer] = useState(4);\n  const [isActive, setIsActive] = useState(true);\n  useEffect(() => {\n    let interval = null;\n    if (isActive) {\n      interval = setInterval(() => {\n        setTimer(prevTimer => {\n          if (prevTimer === 1) {\n            // Switch phases when timer reaches 1\n            switch (phase) {\n              case 'inhale':\n                setPhase('hold');\n                return 4;\n              // Hold for 4 seconds\n              case 'hold':\n                setPhase('exhale');\n                return 6;\n              // Exhale for 6 seconds\n              case 'exhale':\n                setPhase('rest');\n                return 4;\n              // Rest for 4 seconds\n              case 'rest':\n                setPhase('inhale');\n                return 4;\n              // Back to inhale for 4 seconds\n              default:\n                return 4;\n            }\n          }\n          return prevTimer - 1;\n        });\n      }, 1000);\n    }\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [phase, isActive]);\n  const handleReset = () => {\n    setPhase('inhale');\n    setTimer(4);\n    setIsActive(true);\n  };\n  const toggleExercise = () => {\n    setIsActive(!isActive);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"breathing-container\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"breathing-card\",\n      children: /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `breathing-circle ${phase}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"phase-text\",\n            children: phase.toUpperCase()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"timer\",\n            children: [timer, \"s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"instructions\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Follow the breathing phases:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Inhale:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 19\n              }, this), \" Breathe in deeply for 4 seconds.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Hold:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 19\n              }, this), \" Hold your breath for 4 seconds.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Exhale:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 19\n              }, this), \" Breathe out slowly for 6 seconds.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Rest:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 19\n              }, this), \" Relax for 4 seconds before the next cycle.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls text-center\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            className: \"mx-2\",\n            onClick: toggleExercise,\n            children: isActive ? 'Pause' : 'Resume'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            className: \"mx-2\",\n            onClick: handleReset,\n            children: \"Restart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s(BreathingExercises, \"MOKjsFqpK/2riWOXTtLvdxqU/Xg=\");\n_c = BreathingExercises;\nexport default BreathingExercises;\nvar _c;\n$RefreshReg$(_c, \"BreathingExercises\");","map":{"version":3,"names":["React","useState","useEffect","Container","Card","Button","jsxDEV","_jsxDEV","BreathingExercises","_s","phase","setPhase","timer","setTimer","isActive","setIsActive","interval","setInterval","prevTimer","clearInterval","handleReset","toggleExercise","className","children","Body","toUpperCase","fileName","_jsxFileName","lineNumber","columnNumber","variant","onClick","_c","$RefreshReg$"],"sources":["D:/Asma Project/Project_Mar2025/Asma21March/frontend/src/pages/BreathingExercises.js"],"sourcesContent":["/*\nimport React, { useState, useEffect } from 'react';\nimport { Container, Card, Button } from 'react-bootstrap';\nimport '../styles/BreathingExercises.css';\n\nconst BreathingExercises = () => {\n  const [phase, setPhase] = useState('inhale');\n  const [timer, setTimer] = useState(4);\n\n  useEffect(() => {\n    const phases = ['inhale', 'hold', 'exhale', 'rest'];\n    let phaseIndex = phases.indexOf(phase);\n\n    const interval = setInterval(() => {\n      setTimer((prev) => {\n        if (prev === 1) {\n          // Move to the next phase\n          phaseIndex = (phaseIndex + 1) % phases.length;\n          setPhase(phases[phaseIndex]);\n          return phaseIndex === 2 ? 6 : 4; // Reset timer: 6 seconds for \"exhale\", 4 for others\n        }\n        return prev - 1; // Decrement timer\n      });\n    }, 1000);\n\n    return () => clearInterval(interval); // Cleanup interval on unmount\n  }, [phase]); // Add `phase` as a dependency\n\n  return (\n    <Container className=\"breathing-container\">\n      <Card className=\"breathing-card\">\n        <Card.Body>\n          <div className={`breathing-circle ${phase}`}>\n            <div className=\"phase-text\">{phase.toUpperCase()}</div>\n            <div className=\"timer\">{timer}s</div>\n          </div>\n          <div className=\"instructions\">\n            <p>Follow the breathing phases:</p>\n            <ul>\n              <li><strong>Inhale:</strong> Breathe in deeply for 4 seconds.</li>\n              <li><strong>Hold:</strong> Hold your breath for 4 seconds.</li>\n              <li><strong>Exhale:</strong> Breathe out slowly for 6 seconds.</li>\n              <li><strong>Rest:</strong> Relax for 4 seconds before the next cycle.</li>\n            </ul>\n          </div>\n          <div className=\"controls text-center\">\n            <Button\n              variant=\"primary\"\n              onClick={() => {\n                setPhase('inhale');\n                setTimer(4);\n              }}\n            >\n              Restart\n            </Button>\n          </div>\n        </Card.Body>\n      </Card>\n    </Container>\n  );\n};\n\nexport default BreathingExercises;\n*/\n\n\nimport React, { useState, useEffect } from 'react';\nimport { Container, Card, Button } from 'react-bootstrap';\nimport '../styles/BreathingExercises.css';\n\nconst BreathingExercises = () => {\n  const [phase, setPhase] = useState('inhale');\n  const [timer, setTimer] = useState(4);\n  const [isActive, setIsActive] = useState(true);\n\n  useEffect(() => {\n    let interval = null;\n    if (isActive) {\n      interval = setInterval(() => {\n        setTimer((prevTimer) => {\n          if (prevTimer === 1) {\n            // Switch phases when timer reaches 1\n            switch (phase) {\n              case 'inhale':\n                setPhase('hold');\n                return 4; // Hold for 4 seconds\n              case 'hold':\n                setPhase('exhale');\n                return 6; // Exhale for 6 seconds\n              case 'exhale':\n                setPhase('rest');\n                return 4; // Rest for 4 seconds\n              case 'rest':\n                setPhase('inhale');\n                return 4; // Back to inhale for 4 seconds\n              default:\n                return 4;\n            }\n          }\n          return prevTimer - 1;\n        });\n      }, 1000);\n    }\n\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [phase, isActive]);\n\n  const handleReset = () => {\n    setPhase('inhale');\n    setTimer(4);\n    setIsActive(true);\n  };\n\n  const toggleExercise = () => {\n    setIsActive(!isActive);\n  };\n\n  return (\n    <Container className=\"breathing-container\">\n      <Card className=\"breathing-card\">\n        <Card.Body>\n          <div className={`breathing-circle ${phase}`}>\n            <div className=\"phase-text\">{phase.toUpperCase()}</div>\n            <div className=\"timer\">{timer}s</div>\n          </div>\n          <div className=\"instructions\">\n            <p>Follow the breathing phases:</p>\n            <ul>\n              <li><strong>Inhale:</strong> Breathe in deeply for 4 seconds.</li>\n              <li><strong>Hold:</strong> Hold your breath for 4 seconds.</li>\n              <li><strong>Exhale:</strong> Breathe out slowly for 6 seconds.</li>\n              <li><strong>Rest:</strong> Relax for 4 seconds before the next cycle.</li>\n            </ul>\n          </div>\n          <div className=\"controls text-center\">\n            <Button\n              variant=\"primary\"\n              className=\"mx-2\"\n              onClick={toggleExercise}\n            >\n              {isActive ? 'Pause' : 'Resume'}\n            </Button>\n            <Button\n              variant=\"secondary\"\n              className=\"mx-2\"\n              onClick={handleReset}\n            >\n              Restart\n            </Button>\n          </div>\n        </Card.Body>\n      </Card>\n    </Container>\n  );\n};\n\nexport default BreathingExercises;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}