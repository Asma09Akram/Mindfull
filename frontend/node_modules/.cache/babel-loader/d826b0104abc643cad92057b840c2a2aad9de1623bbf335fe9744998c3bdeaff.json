{"ast":null,"code":"var _jsxFileName = \"D:\\\\Asma Project\\\\Project_Mar2025\\\\Asma21March\\\\frontend\\\\src\\\\pages\\\\Journaling.js\",\n  _s = $RefreshSig$();\n/*\nimport React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Card, Form, Button } from 'react-bootstrap';\nimport { useAuth } from '../contexts/AuthContext';\nimport axios from 'axios';\nimport '../styles/Journaling.css';\n\nconst moodOptions = [\n  'Very Happy', 'Happy', 'Neutral', 'Sad', 'Very Sad',\n  'Anxious', 'Calm', 'Energetic', 'Tired', 'Stressed'\n];\n\nconst Journaling = () => {\n  const [entries, setEntries] = useState([]);\n  const [currentMood, setCurrentMood] = useState('');\n  const [notes, setNotes] = useState('');\n  const { currentUser } = useAuth();\n\n  useEffect(() => {\n    fetchEntries();\n  }, []);\n\n  const fetchEntries = async () => {\n    try {\n      const response = await axios.get('/api/users/journal-entries', {\n        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\n      });\n      setEntries(response.data);\n    } catch (error) {\n      console.error('Error fetching journal entries:', error);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      await axios.post('/api/users/journal-entries', {\n        mood: currentMood,\n        notes,\n        date: new Date()\n      }, {\n        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\n      });\n      setCurrentMood('');\n      setNotes('');\n      fetchEntries();\n    } catch (error) {\n      console.error('Error saving journal entry:', error);\n    }\n  };\n\n  return (\n    <Container className=\"journaling-page\">\n      <h1 className=\"text-center mb-5 fade-in\">Mindfulness Journal</h1>\n      \n      <Row>\n        <Col md={8} className=\"mb-4\">\n          <Card className=\"journal-card\">\n            <Card.Body>\n              <h2 className=\"mb-4\">New Entry</h2>\n              <Form onSubmit={handleSubmit}>\n                <Form.Group className=\"mb-4\">\n                  <Form.Label>How are you feeling today?</Form.Label>\n                  <Form.Select \n                    value={currentMood}\n                    onChange={(e) => setCurrentMood(e.target.value)}\n                    required\n                  >\n                    <option value=\"\">Select your mood</option>\n                    {moodOptions.map((mood) => (\n                      <option key={mood} value={mood}>{mood}</option>\n                    ))}\n                  </Form.Select>\n                </Form.Group>\n                \n                <Form.Group className=\"mb-4\">\n                  <Form.Label>Reflect on your day</Form.Label>\n                  <Form.Control\n                    as=\"textarea\"\n                    rows={4}\n                    value={notes}\n                    onChange={(e) => setNotes(e.target.value)}\n                    placeholder=\"What's on your mind? How did your meditation practice go?\"\n                    required\n                  />\n                </Form.Group>\n                \n                <Button type=\"submit\" variant=\"primary\" className=\"w-100\">\n                  Save Entry\n                </Button>\n              </Form>\n            </Card.Body>\n          </Card>\n        </Col>\n        \n        <Col md={4}>\n          <Card className=\"history-card\">\n            <Card.Body>\n              <h2 className=\"mb-4\">Recent Entries</h2>\n              {entries.map((entry, index) => (\n                <div key={index} className=\"entry-item mb-3\">\n                  <div className=\"d-flex justify-content-between align-items-center\">\n                    <small className=\"text-muted\">\n                      {new Date(entry.date).toLocaleDateString()}\n                    </small>\n                    <span className=\"mood-badge\">{entry.mood}</span>\n                  </div>\n                  <p className=\"entry-notes mt-2\">{entry.notes}</p>\n                  <hr />\n                </div>\n              ))}\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Journaling;\n*/\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { Container, Form, Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Journaling = () => {\n  _s();\n  const [entry, setEntry] = useState({\n    title: '',\n    content: '',\n    mood: ''\n  });\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post('http://localhost:5000/api/users/journal-entries', entry, {\n        headers: {\n          'Content-Type': 'application/json'\n          // Add authorization header if needed\n          // 'Authorization': `Bearer ${yourAuthToken}`\n        }\n      });\n      console.log('Journal entry saved:', response.data);\n      // Clear form after successful submission\n      setEntry({\n        title: '',\n        content: '',\n        mood: ''\n      });\n    } catch (error) {\n      console.error('Error saving journal entry:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          value: entry.title,\n          onChange: e => setEntry({\n            ...entry,\n            title: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Content\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          as: \"textarea\",\n          rows: 3,\n          value: entry.content,\n          onChange: e => setEntry({\n            ...entry,\n            content: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Mood\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          value: entry.mood,\n          onChange: e => setEntry({\n            ...entry,\n            mood: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        children: \"Save Entry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n_s(Journaling, \"CI0FdbAMPn5Ef1G5Wes+/0s6G1c=\");\n_c = Journaling;\nexport default Journaling;\nvar _c;\n$RefreshReg$(_c, \"Journaling\");","map":{"version":3,"names":["React","useState","axios","Container","Form","Button","jsxDEV","_jsxDEV","Journaling","_s","entry","setEntry","title","content","mood","handleSubmit","e","preventDefault","response","post","headers","console","log","data","error","children","onSubmit","Group","className","Label","fileName","_jsxFileName","lineNumber","columnNumber","Control","type","value","onChange","target","as","rows","variant","_c","$RefreshReg$"],"sources":["D:/Asma Project/Project_Mar2025/Asma21March/frontend/src/pages/Journaling.js"],"sourcesContent":["\n/*\nimport React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Card, Form, Button } from 'react-bootstrap';\nimport { useAuth } from '../contexts/AuthContext';\nimport axios from 'axios';\nimport '../styles/Journaling.css';\n\nconst moodOptions = [\n  'Very Happy', 'Happy', 'Neutral', 'Sad', 'Very Sad',\n  'Anxious', 'Calm', 'Energetic', 'Tired', 'Stressed'\n];\n\nconst Journaling = () => {\n  const [entries, setEntries] = useState([]);\n  const [currentMood, setCurrentMood] = useState('');\n  const [notes, setNotes] = useState('');\n  const { currentUser } = useAuth();\n\n  useEffect(() => {\n    fetchEntries();\n  }, []);\n\n  const fetchEntries = async () => {\n    try {\n      const response = await axios.get('/api/users/journal-entries', {\n        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\n      });\n      setEntries(response.data);\n    } catch (error) {\n      console.error('Error fetching journal entries:', error);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      await axios.post('/api/users/journal-entries', {\n        mood: currentMood,\n        notes,\n        date: new Date()\n      }, {\n        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\n      });\n      setCurrentMood('');\n      setNotes('');\n      fetchEntries();\n    } catch (error) {\n      console.error('Error saving journal entry:', error);\n    }\n  };\n\n  return (\n    <Container className=\"journaling-page\">\n      <h1 className=\"text-center mb-5 fade-in\">Mindfulness Journal</h1>\n      \n      <Row>\n        <Col md={8} className=\"mb-4\">\n          <Card className=\"journal-card\">\n            <Card.Body>\n              <h2 className=\"mb-4\">New Entry</h2>\n              <Form onSubmit={handleSubmit}>\n                <Form.Group className=\"mb-4\">\n                  <Form.Label>How are you feeling today?</Form.Label>\n                  <Form.Select \n                    value={currentMood}\n                    onChange={(e) => setCurrentMood(e.target.value)}\n                    required\n                  >\n                    <option value=\"\">Select your mood</option>\n                    {moodOptions.map((mood) => (\n                      <option key={mood} value={mood}>{mood}</option>\n                    ))}\n                  </Form.Select>\n                </Form.Group>\n                \n                <Form.Group className=\"mb-4\">\n                  <Form.Label>Reflect on your day</Form.Label>\n                  <Form.Control\n                    as=\"textarea\"\n                    rows={4}\n                    value={notes}\n                    onChange={(e) => setNotes(e.target.value)}\n                    placeholder=\"What's on your mind? How did your meditation practice go?\"\n                    required\n                  />\n                </Form.Group>\n                \n                <Button type=\"submit\" variant=\"primary\" className=\"w-100\">\n                  Save Entry\n                </Button>\n              </Form>\n            </Card.Body>\n          </Card>\n        </Col>\n        \n        <Col md={4}>\n          <Card className=\"history-card\">\n            <Card.Body>\n              <h2 className=\"mb-4\">Recent Entries</h2>\n              {entries.map((entry, index) => (\n                <div key={index} className=\"entry-item mb-3\">\n                  <div className=\"d-flex justify-content-between align-items-center\">\n                    <small className=\"text-muted\">\n                      {new Date(entry.date).toLocaleDateString()}\n                    </small>\n                    <span className=\"mood-badge\">{entry.mood}</span>\n                  </div>\n                  <p className=\"entry-notes mt-2\">{entry.notes}</p>\n                  <hr />\n                </div>\n              ))}\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Journaling;\n*/\n\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { Container, Form, Button } from 'react-bootstrap';\n\nconst Journaling = () => {\n  const [entry, setEntry] = useState({\n    title: '',\n    content: '',\n    mood: ''\n  });\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await axios.post(\n        'http://localhost:5000/api/users/journal-entries',\n        entry,\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            // Add authorization header if needed\n            // 'Authorization': `Bearer ${yourAuthToken}`\n          }\n        }\n      );\n      console.log('Journal entry saved:', response.data);\n      // Clear form after successful submission\n      setEntry({ title: '', content: '', mood: '' });\n    } catch (error) {\n      console.error('Error saving journal entry:', error);\n    }\n  };\n\n  return (\n    <Container>\n      <Form onSubmit={handleSubmit}>\n        <Form.Group className=\"mb-3\">\n          <Form.Label>Title</Form.Label>\n          <Form.Control\n            type=\"text\"\n            value={entry.title}\n            onChange={(e) => setEntry({...entry, title: e.target.value})}\n          />\n        </Form.Group>\n        <Form.Group className=\"mb-3\">\n          <Form.Label>Content</Form.Label>\n          <Form.Control\n            as=\"textarea\"\n            rows={3}\n            value={entry.content}\n            onChange={(e) => setEntry({...entry, content: e.target.value})}\n          />\n        </Form.Group>\n        <Form.Group className=\"mb-3\">\n          <Form.Label>Mood</Form.Label>\n          <Form.Control\n            type=\"text\"\n            value={entry.mood}\n            onChange={(e) => setEntry({...entry, mood: e.target.value})}\n          />\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\">\n          Save Entry\n        </Button>\n      </Form>\n    </Container>\n  );\n};\n\nexport default Journaling;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}